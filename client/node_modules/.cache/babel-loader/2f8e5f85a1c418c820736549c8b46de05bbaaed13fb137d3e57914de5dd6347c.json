{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\ai-chatbot\\\\client\\\\src\\\\ChatBox.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChatBox() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [pending, setPending] = useState(false);\n  const chatEndRef = useRef(null);\n\n  // Use localhost in dev, relative path in prod\n  const API_BASE = import.meta && import.meta.env && import.meta.env.VITE_API_BASE || (window.location.hostname === \"localhost\" ? \"http://localhost:5000\" : \"\");\n  const sendMessage = async () => {\n    const text = input.trim();\n    if (!text || pending) return;\n    const userMessage = {\n      text,\n      sender: \"user\"\n    };\n    const loadingMessage = {\n      text: \"Typing...\",\n      sender: \"bot\",\n      loading: true\n    };\n\n    // Add both at once to avoid flicker/race\n    setMessages(prev => [...prev, userMessage, loadingMessage]);\n    setInput(\"\");\n    setPending(true);\n\n    // Add a timeout (30s) so it never hangs forever\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 30000);\n    try {\n      const res = await fetch(`${API_BASE}/api/gemini`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          message: userMessage.text\n        }),\n        signal: controller.signal\n      });\n      clearTimeout(timeoutId);\n      if (!res.ok) {\n        // Try to read server error if provided\n        let errMsg = \"Server error\";\n        try {\n          const errData = await res.json();\n          if (errData !== null && errData !== void 0 && errData.reply) errMsg = errData.reply;\n        } catch {}\n        throw new Error(errMsg);\n      }\n      const data = await res.json();\n      const botReply = (data === null || data === void 0 ? void 0 : data.reply) || \"⚠️ No reply from server.\";\n      setMessages(prev => prev.filter(m => !m.loading).concat({\n        text: botReply,\n        sender: \"bot\"\n      }));\n    } catch (err) {\n      clearTimeout(timeoutId);\n      console.error(\"Frontend error:\", err);\n      const msg = err.name === \"AbortError\" ? \"⚠️ Request timed out. Try again.\" : \"⚠️ Could not connect to AI. Try again.\";\n      setMessages(prev => prev.filter(m => !m.loading).concat({\n        text: msg,\n        sender: \"bot\"\n      }));\n    } finally {\n      setPending(false);\n    }\n  };\n  useEffect(() => {\n    var _chatEndRef$current;\n    (_chatEndRef$current = chatEndRef.current) === null || _chatEndRef$current === void 0 ? void 0 : _chatEndRef$current.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: [messages.map((msg, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.sender}-message`,\n        children: msg.text\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: chatEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        onKeyDown: e => {\n          if (e.key === \"Enter\" && !e.shiftKey) {\n            e.preventDefault();\n            sendMessage();\n          }\n        },\n        placeholder: \"Type a message...\",\n        disabled: pending\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        disabled: pending || !input.trim(),\n        children: pending ? \"Sending...\" : \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatBox, \"XcChSVHwW2hSp6YpDL93oKj1Sx4=\");\n_c = ChatBox;\nvar _c;\n$RefreshReg$(_c, \"ChatBox\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","ChatBox","_s","messages","setMessages","input","setInput","pending","setPending","chatEndRef","API_BASE","import","meta","env","VITE_API_BASE","window","location","hostname","sendMessage","text","trim","userMessage","sender","loadingMessage","loading","prev","controller","AbortController","timeoutId","setTimeout","abort","res","fetch","method","headers","body","JSON","stringify","message","signal","clearTimeout","ok","errMsg","errData","json","reply","Error","data","botReply","filter","m","concat","err","console","error","msg","name","_chatEndRef$current","current","scrollIntoView","behavior","className","children","map","idx","fileName","_jsxFileName","lineNumber","columnNumber","ref","type","value","onChange","e","target","onKeyDown","key","shiftKey","preventDefault","placeholder","disabled","onClick","_c","$RefreshReg$"],"sources":["C:/Users/lenovo/Desktop/ai-chatbot/client/src/ChatBox.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\n\nexport default function ChatBox() {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [pending, setPending] = useState(false);\n  const chatEndRef = useRef(null);\n\n  // Use localhost in dev, relative path in prod\n  const API_BASE =\n    (import.meta && import.meta.env && import.meta.env.VITE_API_BASE) ||\n    (window.location.hostname === \"localhost\" ? \"http://localhost:5000\" : \"\");\n\n  const sendMessage = async () => {\n    const text = input.trim();\n    if (!text || pending) return;\n\n    const userMessage = { text, sender: \"user\" };\n    const loadingMessage = { text: \"Typing...\", sender: \"bot\", loading: true };\n\n    // Add both at once to avoid flicker/race\n    setMessages((prev) => [...prev, userMessage, loadingMessage]);\n    setInput(\"\");\n    setPending(true);\n\n    // Add a timeout (30s) so it never hangs forever\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 30000);\n\n    try {\n      const res = await fetch(`${API_BASE}/api/gemini`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ message: userMessage.text }),\n        signal: controller.signal,\n      });\n      clearTimeout(timeoutId);\n\n      if (!res.ok) {\n        // Try to read server error if provided\n        let errMsg = \"Server error\";\n        try {\n          const errData = await res.json();\n          if (errData?.reply) errMsg = errData.reply;\n        } catch {}\n        throw new Error(errMsg);\n      }\n\n      const data = await res.json();\n      const botReply = data?.reply || \"⚠️ No reply from server.\";\n\n      setMessages((prev) =>\n        prev.filter((m) => !m.loading).concat({ text: botReply, sender: \"bot\" })\n      );\n    } catch (err) {\n      clearTimeout(timeoutId);\n      console.error(\"Frontend error:\", err);\n      const msg =\n        err.name === \"AbortError\"\n          ? \"⚠️ Request timed out. Try again.\"\n          : \"⚠️ Could not connect to AI. Try again.\";\n      setMessages((prev) =>\n        prev.filter((m) => !m.loading).concat({ text: msg, sender: \"bot\" })\n      );\n    } finally {\n      setPending(false);\n    }\n  };\n\n  useEffect(() => {\n    chatEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  return (\n    <div className=\"chat-container\">\n      <div className=\"chat-box\">\n        {messages.map((msg, idx) => (\n          <div key={idx} className={`message ${msg.sender}-message`}>\n            {msg.text}\n          </div>\n        ))}\n        <div ref={chatEndRef} />\n      </div>\n\n      <div className=\"chat-input\">\n        <input\n          type=\"text\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          onKeyDown={(e) => {\n            if (e.key === \"Enter\" && !e.shiftKey) {\n              e.preventDefault();\n              sendMessage();\n            }\n          }}\n          placeholder=\"Type a message...\"\n          disabled={pending}\n        />\n        <button onClick={sendMessage} disabled={pending || !input.trim()}>\n          {pending ? \"Sending...\" : \"Send\"}\n        </button>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}